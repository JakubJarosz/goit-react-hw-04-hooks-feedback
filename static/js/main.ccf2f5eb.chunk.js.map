{"version":3,"sources":["components/Statistic/Statistic.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/Feedback/Feedback.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Statistic","_this$props","this","props","good","neutral","bad","total","positivePercentage","react_default","a","createElement","React","Component","FeedbackOptions","goodIncrease","neutralIncrease","badIncrease","style","display","onClick","Section","title","children","Notification","message","Feedback","_useState","useState","_useState2","Object","slicedToArray","setGood","_useState3","_useState4","setNeutral","_useState5","_useState6","setBad","_useState7","_useState8","setTotal","useEffect","components_Section_Section","components_FeedbackOptions_FeedbackOptions","components_Statistic_Statistic","toFixed","components_Notification_Notification","App","height","justifyContent","alignItems","fontSize","color","components_Feedback_Feedback","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ccf2f5eb.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Statistic extends React.Component {\n   \n    render() {\n        const { good, neutral, bad, total, positivePercentage } = this.props\n        return (\n            <div>   \n                \n                    <p>Good: {good}</p>\n                    <p>Neutral: {neutral}</p>\n                    <p>Bad: {bad}</p>\n                    <p>Total: {total}</p>\n                    <p>Positive feedback: {positivePercentage}%</p>\n                \n            </div>\n        )\n    }\n\n};\n\nStatistic.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.string.isRequired\n};\n\nexport default Statistic","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass FeedbackOptions extends React.Component {\n    render() {\n        const { goodIncrease, neutralIncrease, badIncrease } = this.props;\n        return (\n            <div>\n                <div style={{ display: 'flex' }}>\n                    <button onClick={goodIncrease}>Good</button>\n                    <button onClick={\n                        neutralIncrease\n                    }>Neutral</button>\n                    <button onClick={\n                        badIncrease\n                    }>Bad</button>\n                </div>\n            </div>\n        )\n    }\n\n};\n\nFeedbackOptions.propTypes = {\n    goodIncrease: PropTypes.func.isRequired,\n    neutralIncrease: PropTypes.func.isRequired,\n    badIncrease: PropTypes.func.isRequired\n};\n\nexport default FeedbackOptions","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nclass Section extends React.Component {\n    render() {\n        const { title, children} = this.props;\n        return (\n            <div>\n                <h3>{title}</h3> \n                {children}\n            </div>\n        )\n    }\n\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.object.isRequired\n}; \n\nexport default Section","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nclass Notification extends React.Component {\n    render() {\n        const {message} = this.props;\n        return (\n            <p>{message}</p>\n        )\n    }\n\n};\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired\n};\n \nexport default Notification","import React, { useState, useEffect } from \"react\";\nimport Statistic from \"../Statistic/Statistic\";\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\nimport Section from \"../Section/Section\";\nimport Notification from \"../Notification/Notification\";\n\n\nconst Feedback = () => {\n    const [good, setGood] = useState(0);\n    const [neutral, setNeutral] = useState(0);\n    const [bad, setBad] = useState(0);\n    const [total, setTotal] = useState(0);\n\n    const incrementGood = () => {\n        return setGood(good + 1)\n    };\n\n    const incrementNeutral = () => {\n        return setNeutral(neutral + 1)\n    };\n\n    const incrementBad = () => {\n        return setBad(bad + 1)\n    };\n\n    useEffect(() => {\n        setTotal(good + neutral + bad)\n\n    }, [good, neutral, bad]);\n\n    \n\n\n    const countPositiveFeedbackPercentage = () => {\n        return total > 0 ? ((good / total) * 100).toFixed(2) : 0\n    }\n\n    return (\n        <div>\n            <Section title=\"Please leave feedback\">\n                <FeedbackOptions\n                    goodIncrease={incrementGood}\n                    neutralIncrease={incrementNeutral}\n                    badIncrease={incrementBad}\n                />\n            </Section>\n            {total > 0 ? (<Section title=\"Statistics\">\n                <Statistic\n                    good={good}\n                    neutral={neutral}\n                    bad={bad}\n                    total={total}\n                    positivePercentage={countPositiveFeedbackPercentage()}\n                />\n            </Section>) : (<Notification message={\"There is no feedback\"} />)}\n        </div>\n    );\n};\n\n\nexport default Feedback","\nimport React from 'react';\nimport Feedback from './components/Feedback/Feedback';\n\nexport const App = () => {\n  return (\n    <div\n      style={{\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '50px',\n        color: '#010101',\n      }}>\n      <Feedback/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}